{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Basic Tutorial for Open Source Development on GitHub","text":""},{"location":"#requirements","title":"Requirements","text":""},{"location":"#general-requirements","title":"General Requirements","text":"<p>Software development is a team effort. Each team member has a role to play in the development process.  Here, we will simulate a software development team as you may find it both in industry or academia.  The team consists of a team leader and team members.  The team leader is responsible for setting up and managing the repository.</p> <p>Sections marked with an asterix (*) are meant to be executed only by the team leader. These sections typically involve  one-time tasks, such as setting up a branch protection rule.  If you choose to mirror the practice repo instead of forking it (see below), you can rotate the team leader role every time an Asterix appears in the documentation. It is recommended that the first team leader is the one who is most  experienced with git. </p>"},{"location":"#technical-requirements","title":"Technical Requirements","text":"<p>Each student in the group should meet the following requirements:</p>"},{"location":"#required","title":"Required","text":"<ul> <li>A Github account.</li> <li>Git installed on your computer.</li> <li>Python3 installed on your computer</li> </ul>"},{"location":"#recommended","title":"Recommended:","text":"<ul> <li>GitHub Desktop installed on your computer</li> <li>Pycharm Community Edition installed on your computer</li> </ul>"},{"location":"#create-a-repository","title":"* Create a repository","text":"<p>First, we need to create a repository for subsequent exercises in which we  can practice open-source software development as a team. </p> <p>There are two options here:</p>"},{"location":"#option-1-mirroring-the-practice-repository","title":"Option 1: Mirroring the Practice Repository","text":"<p>Here, we create a simple copy of the practice repo by mirroring it.  The team leader will have to execute the following steps on their machine:</p> <ol> <li> <p>Create a new repository on GitHub:    Go to your GitHub account and create a new repository. Don't add any README or license, just add an empty repository.    Name the repository <code>contributor-onboarding</code>.</p> </li> <li> <p>Clone the original repository to your local machine:    Open your terminal or command prompt and run the following command to clone the repository:</p> </li> </ol> <pre><code>git clone https://github.com/AutoResearch/contributor-onboarding.git\n</code></pre> <ol> <li> <p>Change into the cloned repository directory: <pre><code>cd contributor-onboarding\n</code></pre></p> </li> <li> <p>Remove the original remote (optional, but recommended to avoid confusion): <pre><code>git remote remove origin\n</code></pre></p> </li> <li> <p>Add your own repository as the new remote: <pre><code>git remote add origin https://github.com/YOURGITHUBUSERNAME/contributor-onboarding.git\n</code></pre></p> </li> <li> <p>Push the code to your own repository: <pre><code>git push -u origin main\n</code></pre></p> </li> </ol> <p>If your repository uses a different branch name, replace <code>main</code> with the correct branch name.</p>"},{"location":"#option-2-forking-the-practice-repository","title":"Option 2: Forking the Practice Repository","text":"<p>*Note: If you choose this option, other members of the team will be able to contribute to the working repository  but do not have the ability to manage the repository settings. There are a number of *</p> <p>Here, we mimic a practice in  open-source development where there is some existing project (https://github.com/AutoResearch/contributor-onboarding) and we want to contribute to a major feature as a team. To do that, we'll have to fork the repo, i.e., create our own copy of it which is linked to the original project.</p> <ol> <li>Go to the repository you want to fork: https://github.com/AutoResearch/contributor-onboarding</li> <li>Click the \"Fork\" button in the upper right corner of the page.</li> <li>Select your username as the destination for the fork.</li> <li>You may add a description to the fork if you wish.</li> <li>Check the box \"Copy the <code>main</code> branch only\".</li> <li>Click the \"Create Fork\" button.</li> <li>You now have a copy of the repository in your account.</li> </ol>"},{"location":"#add-contributors-to-the-repository","title":"Add Contributors to the Repository","text":"<p>As a next step we will add all students in the team as contributors.  You will need the GitHub usernames of all students in your team.</p> <ol> <li>Go to the repository on GitHub you want to add contributors to. This is the repository you just created.</li> <li>Click the \"Settings\" tab.</li> <li>Click the \"Manage access\" button.</li> <li>Click the \"Invite a collaborator\" button.</li> <li>Enter the username of the person you want to add as a contributor.</li> <li>Note: For this exercise, you will want to give the person \"Maintain\" access. However, if you are on a forked repo, you may not have that option.</li> <li>Click the \"Add [username] to this repository\" button.</li> <li>The person you added will receive an email invitation to contribute to the repository.</li> <li>Once they accept the invitation, they will be able to contribute to the repository.</li> </ol> <p>Hint: You can also add contributors by adding their GitHub username to the <code>CONTRIBUTORS.md</code> file in the repository.</p>"},{"location":"#cloning-a-repository-to-your-local-machine","title":"Cloning a Repository to Your Local Machine","text":""},{"location":"#option-1-cloning-with-github-desktop","title":"Option 1: Cloning with GitHub Desktop","text":"<p>Note: You may have to log into your GitHub account from GitHub Desktop before you can clone a repository.  You may also need to give GitHub Desktop permission to access your GitHub account. </p> <ol> <li>Open GitHub Desktop.</li> <li>Click the \"File\" menu and select \"Clone Repository\".</li> <li>Select the \"URL\" tab.</li> <li>Paste the URL of the repository you want to clone.</li> <li>Choose a local path for the repository.</li> <li>Click the \"Clone\" button.</li> <li>You now have a copy of the repository on your computer.</li> </ol>"},{"location":"#option-2-cloning-with-git","title":"Option 2: Cloning with git","text":"<ol> <li>Open a terminal.</li> <li>Navigate to the directory where you want to clone the repository.</li> <li>Run the following command: <pre><code>git clone repository_url\n</code></pre></li> <li>You now have a copy of the repository on your computer.</li> </ol>"},{"location":"#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<p>It is a good practice to create a virtual environment for each project you work on. This ensures that the dependencies for each project are isolated from each other. Here, we will create a virtual environment for the project in Python.</p> <ol> <li>Open a terminal.</li> <li>Navigate to the directory where you cloned the repository.</li> <li>Run the following command to create a virtual environment: <pre><code>python3.9 -m venv venv\n</code></pre></li> <li>Activate the virtual environment: <pre><code>source venv/bin/activate\n</code></pre></li> <li>You should see <code>(venv)</code> in your terminal prompt, indicating that the virtual environment is active.</li> <li>Upgrade pip <pre><code>pip install --upgrade pip\n</code></pre></li> <li>Install the project dependencies: <pre><code>pip install --upgrade --editable \".[dev]\"\n</code></pre></li> </ol> <p>Now you can use this environment to run code for your project in PyCharm.  Note that you will want to configure PyCharm to use this environment for your project.</p>"},{"location":"#have-a-look-at-the-repository","title":"Have a look at the repository","text":"<p>Next, all students should have a look at the repository. The main code is in the <code>src</code> directory.</p>"},{"location":"#managing-issues","title":"Managing Issues","text":"<p>Issues are a way to track tasks, enhancements, and bugs for your repository.  You might have noticed that the code in the existing repository has a number of issues. Let's go ahead and enlist them. But first, you have to enable issues in your repository.</p>"},{"location":"#enable-issues","title":"* Enable Issues","text":"<ol> <li>Go to the repository on GitHub you just created.</li> <li>Click the \"Settings\" tab.</li> <li>Scroll down to the \"Features\" section.</li> <li>Check the box \"Issues\".</li> </ol>"},{"location":"#create-an-issue","title":"Create An Issue","text":"<p>Now, let's create some issues for the repository.</p> <ol> <li>Go to the repository on GitHub.</li> <li>Click the \"Issues\" tab.</li> <li>Click the \"New issue\" button.'</li> <li>Enter a title and description for the issue.</li> <li>You may also enter labels and assignees if you wish.</li> <li>Click the \"Submit new issue\" button.</li> </ol> <p>Here are some examples but feel free to create your own.  You may use some of the TODO comments in the code as inspiration: - the sum function does not work with float variables - the divide function doesn't check for zero division - the element-wise multiplication function doesn't check for vector shape compatibility - ...</p>"},{"location":"#addressing-issues-through-pull-requests","title":"Addressing Issues Through Pull Requests","text":"<p>Now that you have created some issues, it's time to address them. But we don't want to address them in the main branch directly.  In fact, we want to protect the main branch from direct pushes so that  all changes are made through pull requests. This ensures that all changes are reviewed before  they are merged into the main branch.</p>"},{"location":"#adding-branch-protection-rules","title":"*Adding Branch Protection Rules","text":"<ol> <li>Go to the repository on GitHub you want to add branch protection rules to. This is the repository you just forked.</li> <li>Click the \"Settings\" tab.</li> <li>Click the \"Branches\" tab.</li> <li>Click the \"Add classic branch protection rule\" link.</li> <li>Enter the name of the branch you want to protect. For this exercise, you will want to protect the <code>main</code> branch.</li> <li>Check the box \"Require pull request reviews before merging\".</li> <li>Check the box \"Require approvals\".</li> <li>Enter the number of approvals required. For this exercise, you will want to require two approvals.</li> </ol>"},{"location":"#create-a-branch-for-your-issue","title":"Create a Branch for Your Issue","text":"<p>Students should now assign themselves to issues (ideally one student per issue).  Each student should then create a new branch for their issue:</p>"},{"location":"#option-1-via-github-desktop","title":"Option 1: Via GitHub Desktop","text":"<ol> <li>Open GitHub Desktop.</li> <li>Click the \"Current Repository\" menu and select the repository you want to work on.</li> <li>Click the \"Current Branch\" dropdown.</li> <li>Click the \"New Branch\" button.</li> <li>Enter a name for your branch (e.g., <code>fix/sum-function</code>).</li> <li>Click the \"Create Branch\" button.</li> </ol>"},{"location":"#option-2-via-github","title":"Option 2: Via GitHub","text":"<ol> <li>Go to the repository on GitHub.</li> <li>Click the \"Code\" tab.</li> <li>Click the \"main\" branch dropdown.</li> <li>Enter a name for your branch (e.g., <code>fix/sum-function</code>).</li> <li>Click the \"Create branch\" button.</li> </ol>"},{"location":"#fix-the-issue","title":"Fix the Issue","text":"<p>Now, students should fix the issue in their branch.</p>"},{"location":"#commit-changes-to-your-branch","title":"Commit Changes to Your Branch","text":"<p>Once the issue is fixed, students should commit their changes to their branch.</p>"},{"location":"#option-1-via-github-desktop_1","title":"Option 1: Via GitHub Desktop","text":"<ol> <li>Open GitHub Desktop.</li> <li>Click the \"Current Repository\" menu and select the repository you want to work on.</li> <li>Click the \"Current Branch\" dropdown.</li> <li>Select the branch you want to commit to.</li> <li>Make your changes in the code.</li> <li>Click the \"Commit to main\" button.</li> <li>Enter a summary and description for the commit.</li> <li>Click the \"Commit to main\" button.</li> </ol>"},{"location":"#option-2-git","title":"Option 2: Git","text":"<ol> <li>Open a terminal.</li> <li>Navigate to the repository directory.</li> <li>Run the following command to stage your changes: <pre><code>git add name_of_fixed_file\n</code></pre></li> <li>Run the following command to commit your changes: <pre><code>git commit -m \"description of fix\"\n</code></pre></li> </ol>"},{"location":"#push-changes-to-your-branch","title":"Push Changes to Your Branch","text":"<p>Once the changes are committed, students should push their branch to the repository.</p>"},{"location":"#option-1-via-github-desktop_2","title":"Option 1: Via GitHub Desktop","text":"<ol> <li>Open GitHub Desktop.</li> <li>Click the \"Current Repository\" menu and select the repository you want to work on.</li> <li>Click the \"Current Branch\" dropdown.</li> <li>Select the branch you want to push.</li> <li>Click the \"Push origin\" button.</li> </ol>"},{"location":"#option-2-git_1","title":"Option 2: Git","text":"<ol> <li>Open a terminal.</li> <li>Navigate to the repository directory.</li> <li>Run the following command to push your branch: <pre><code>git push origin name_of_your_branch\n</code></pre></li> </ol>"},{"location":"#create-a-pull-request-pr","title":"Create a Pull Request (PR)","text":"<p>Once the issue is fixed, students should create a pull request to merge their branch into the main branch.</p>"},{"location":"#pr-via-github-desktop","title":"PR Via GitHub Desktop","text":"<ol> <li>Open GitHub Desktop.</li> <li>Click the \"Current Repository\" menu and select the repository you want to work on.</li> <li>Click the \"Current Branch\" dropdown.</li> <li>Select the branch you want to merge into the main branch.</li> <li>Click the \"Pull Request\" button.</li> </ol>"},{"location":"#pr-via-github","title":"PR Via GitHub","text":"<ol> <li>Go to the repository on GitHub.</li> <li>Click the \"Pull requests\" tab.</li> <li>Click the \"New pull request\" button.</li> <li>Select the branch you want to merge into the main branch.</li> <li>Enter a title and description for the PR.</li> <li>Fill out the PR template.</li> <li>Assign reviewers to the PR.</li> <li>Click the \"Create pull request\" button.</li> </ol>"},{"location":"#code-reviews","title":"Code Reviews","text":"<p>Once a pull request (PR) is created, other students should review the code changes. Each PR should have at least two reviewers. You can assign reviewers in the PR itself.</p>"},{"location":"#reviewing-a-pr","title":"Reviewing a PR","text":"<ol> <li>Go to the repository on GitHub.</li> <li>Click the \"Pull requests\" tab.</li> <li>Click the PR you want to review.</li> <li>Review the changes in the PR.</li> <li>Add comments to the PR if you have any feedback.</li> </ol> <p>If you are satisfied with the changes, you can approve the PR.</p> <ol> <li>Click the \"Approve\" button.</li> <li>You may add any additional comments, e.g., congratulate them on the great code they wrote.</li> </ol> <p>If you are concerned about the changes, you can request changes from the author.</p> <ol> <li>Click the \"Request changes\" button.</li> <li>Enter a reason for the requested changes.</li> </ol> <p>Once all reviewers have approved the PR, the author can merge the PR into the main branch.</p>"},{"location":"#unit-tests","title":"Unit Tests","text":"<p>Unit tests are a way to ensure that your code works as expected.</p>"},{"location":"#writing-unit-tests","title":"Writing Unit Tests","text":"<p>To write a unit test, you need to create a new file in the <code>tests</code> directory with the name <code>test_&lt;module&gt;.py</code>,  where <code>&lt;module&gt;</code> is the name of the module you want to test. See the example in the repo. </p> <p>You may want to create some more issues to propose individual tests. </p> <p>Follow the PR process above to then add those tests.</p>"},{"location":"#automated-testing","title":"Automated Testing","text":"<p>Writing tests is great, but running them manually can be time-consuming. Ideally, we should run all tests automatically whenever a new change is proposed to the codebase.</p>"},{"location":"#enable-automated-testing","title":"*Enable Automated Testing","text":"<p>The first thing we need to do is to enable automated testing in the repository.</p> <ol> <li>To enable automated unit tests, go to the repository on GitHub.</li> <li>Click the \"Actions\" tab.</li> <li>Click the \"I understand workflows, go ahead and enable them\" button.</li> </ol>"},{"location":"#add-the-test-workflow","title":"Add the Test Workflow","text":"<p>Now, we need to add a test workflow to the repository.  To do this, simply rename the <code>test-pytest.yml.disabled</code> file in the <code>.github/workflows</code>  directory to <code>test-pytest.yml</code>.</p> <p>Of course, this should be done via a PR and code review.</p> <p>Once the test workflow is enabled, all tests will run automatically whenever a new PR is created.</p>"},{"location":"#automated-documentation","title":"Automated Documentation","text":"<p>Documentation is an important part of any software project. You may have noticed a folder in your repository called <code>docs</code>. This folder contains the documentation for the project.</p> <p>Here, we will enable automated documentation generation using mkdocs. We will automatically generate a documentation every time a code is pushed to the main branch.</p> <ol> <li> <p>First, we want to add the relevant GitHub username to the <code>mkdocs.yml</code> file: <pre><code>repo_url: 'https://github.com/GITHUBUSERNAME/contributor-onboarding'\n</code></pre></p> </li> <li> <p>Now we want to enable the publication workflow.  You can do this by changing the name of the file <code>docs-publish.yml.disabled</code> in the <code>.github/workflows</code>  directory to <code>docs-publish.yml</code>.</p> </li> <li> <p>Now we want to update the documentation links for our project in the <code>pyproject.toml</code> file.  To do this, add the corresponding GitHub repository link to the <code>documentation</code> section of the file. <pre><code>[project.urls]\nrepository = \"https://github.com/GITHUBUSERNAME/contributor-onboarding\"\ndocumentation = \"https://GITHUBUSERNAME.github.io/contributor-onboarding/\"\n</code></pre></p> </li> <li> <p>Finally, we need to make sure the documentation can be built in the repository.  To do this, navigate to the Settings -&gt; GitHub Pages. For \"Source\", select \"Deploy from Branch\".  For \"Branch\", select \"gh-pages\". Click \"Save\".</p> </li> <li> <p>Publishing your Package on PyPi</p> </li> </ol> <p>Here, we will simulate how to publish your code as an actual PyPi package. However, we will not actually publish the code to PyPi, but rather to the test PyPi server.</p> <ol> <li> <p>The owner of the GitHub repository should first create a PyPi account. They then need to create a PyPi API token. This token should be stored as a secret in the GitHub repository.</p> </li> <li> <p>Next they need to add the token to the GitHub secrets.</p> </li> <li>Navigate to your GitHub repository.</li> <li>Go to <code>Settings</code> &gt; <code>Secrets and variables</code> &gt; <code>Actions</code>.</li> <li>Click <code>New repository secret</code>.</li> <li> <p>Add a new secret with the name <code>TEST_PYPI_API_TOKEN</code> and the value of your Test PyPI token.</p> </li> <li> <p>Now, we need to enable the publication workflow.  You can do this by changing the name of the file <code>python-publish.yml.disabled</code> in the <code>.github/workflows</code> directory to <code>python-publish.yml</code>.</p> </li> <li> <p>Now, you can create a new release in the repository. </p> </li> <li>Go to the repository on GitHub.</li> <li>Click the \"Releases\" tab.</li> <li>Click the \"Draft a new release\" button.</li> <li>Enter a tag version (e.g., v0.1.0).</li> <li>Enter a title and description for the release.</li> <li>Click the \"Publish release\" button.</li> </ol> <p>Congratulations, you published your first pip package!</p>"},{"location":"resources/github-basics/","title":"The Basics of GitHub","text":""},{"location":"resources/github-basics/#course-overview-and-learning-outcomes","title":"\ud83e\udd13 Course overview and learning outcomes","text":"<p>The goal of this course is to give you a brief introduction to GitHub. We\u2019ll also provide you with materials for further learning and a few ideas to get you started on our platform. \ud83d\ude80</p>"},{"location":"resources/github-basics/#git-and-github","title":"Git and GitHub","text":"<p>Git is a distributed Version Control System (VCS), which means it is a useful tool for easily tracking changes to your code, collaborating, and sharing. With Git you can track the changes you make to your project so you always have a record of what you\u2019ve worked on and can easily revert back to an older version if need be. It also makes working with others easier\u2014groups of people can work together on the same project and merge their changes into one final source!</p> <p>GitHub is a way to use the same power of Git all online with an easy-to-use interface. It\u2019s used across the software world and beyond to collaborate and maintain the history of projects.</p> <p>GitHub is home to some of the most advanced technologies in the world. Whether you're visualizing data or building a new game, there's a whole community and set of tools on GitHub that can get you to the next step. This course starts with the basics of GitHub, but we'll dig into the rest later.</p>"},{"location":"resources/github-basics/#understanding-the-github-flow","title":"Understanding the GitHub flow","text":"<p>The GitHub flow is a lightweight workflow that allows you to experiment and collaborate on your projects easily, without the risk of losing your previous work.</p>"},{"location":"resources/github-basics/#repositories","title":"Repositories","text":"<p>A repository is where your project work happens--think of it as your project folder. It contains all of your project\u2019s files and revision history.  You can work within a repository alone or invite others to collaborate with you on those files.</p>"},{"location":"resources/github-basics/#cloning","title":"Cloning","text":"<p>When a repository is created with GitHub, it\u2019s stored remotely in the \u2601\ufe0f. You can clone a repository to create a local copy on your computer and then use Git to sync the two. This makes it easier to fix issues, add or remove files, and push larger commits. You can also use the editing tool of your choice as opposed to the GitHub UI. Cloning a repository also pulls down all the repository data that GitHub has at that point in time, including all versions of every file and folder for the project! This can be helpful if you experiment with your project and then realize you liked a previous version more.  To learn more about cloning, read \"Cloning a Repository\". </p>"},{"location":"resources/github-basics/#committing-and-pushing","title":"Committing and pushing","text":"<p>Committing and pushing are how you can add the changes you made on your local machine to the remote repository in GitHub. That way your instructor and/or teammates can see your latest work when you\u2019re ready to share it. You can make a commit when you have made changes to your project that you want to \u201ccheckpoint.\u201d You can also add a helpful commit message to remind yourself or your teammates what work you did (e.g. \u201cAdded a README with information about our project\u201d).</p> <p>Once you have a commit or multiple commits that you\u2019re ready to add to your repository, you can use the push command to add those changes to your remote repository. Committing and pushing may feel new at first, but we promise you\u2019ll get used to it \ud83d\ude42</p>"},{"location":"resources/github-basics/#github-terms-to-know","title":"\ud83d\udcbb GitHub terms to know","text":""},{"location":"resources/github-basics/#repositories_1","title":"Repositories","text":"<p>We mentioned repositories already, they are where your project work happens, but let\u2019s talk a bit more about the details of them! As you work more on GitHub you will have many repositories which may feel confusing at first. Fortunately, your \"GitHub dashboard\" helps to easily navigate to your repositories and see useful information about them. Make sure you\u2019re logged in to see it!</p> <p>Repositories also contain READMEs. You can add a README file to your repository to tell other people why your project is useful, what they can do with your project, and how they can use it. We are using this README to communicate how to learn Git and GitHub with you. \ud83d\ude04  To learn more about repositories read \"Creating, Cloning, and Archiving Repositories and \"About README's\". </p>"},{"location":"resources/github-basics/#branches","title":"Branches","text":"<p>You can use branches on GitHub to isolate work that you do not want merged into your final project just yet. Branches allow you to develop features, fix bugs, or safely experiment with new ideas in a contained area of your repository. Typically, you might create a new branch from the default branch of your repository\u2014main. This makes a new working copy of your repository for you to experiment with. Once your new changes have been reviewed by a teammate, or you are satisfied with them, you can merge your changes into the default branch of your repository. To learn more about branching, read \"About Branches\".</p>"},{"location":"resources/github-basics/#forks","title":"Forks","text":"<p>A fork is another way to copy a repository, but is usually used when you want to contribute to someone else\u2019s project. Forking a repository allows you to freely experiment with changes without affecting the original project and is very popular when contributing to open source software projects! To learn more about forking, read \"Fork a repo\"</p>"},{"location":"resources/github-basics/#pull-requests","title":"Pull requests","text":"<p>When working with branches, you can use a pull request to tell others about the changes you want to make and ask for their feedback. Once a pull request is opened, you can discuss and review the potential changes with collaborators and add more changes if need be. You can add specific people as reviewers of your pull request which shows you want their feedback on your changes! Once a pull request is ready-to-go, it can be merged into your main branch. To learn more about pull requests, read \"About Pull Requests\". </p>"},{"location":"resources/github-basics/#issues","title":"Issues","text":"<p>Issues are a way to track enhancements, tasks, or bugs for your work on GitHub. Issues are a great way to keep track of all the tasks you want to work on for your project and let others know what you plan to work on. You can also use issues to tell a favorite open source project about a bug you found or a feature you think would be great to add!</p> <p>For larger projects, you can keep track of many issues on a project board. GitHub Projects help you organize and prioritize your work and you can read more about them in this \"About Project boards document. You likely won\u2019t need a project board for your assignments, but once you move on to even bigger projects, they\u2019re a great way to organize your team\u2019s work! You can also link together pull requests and issues to show that a fix is in progress and to automatically close the issue when someone merges the pull request. To learn more about issues and linking them to your pull requests, read \"About Issues\". </p>"},{"location":"resources/github-basics/#your-user-profile","title":"Your user profile","text":"<p>Your profile page tells people the story of your work through the repositories you're interested in, the contributions you've made, and the conversations you've had. You can also give the world a unique view into who you are with your profile README. You can use your profile to let future employers know all about you!  To learn more about your user profile and adding and updating your profile README, read \"Managing Your Profile README\". </p>"},{"location":"resources/github-basics/#using-markdown-on-github","title":"Using markdown on GitHub","text":"<p>You might have noticed already, but you can add some fun styling to your issues, pull requests, and files. \"Markdown\" is an easy way to style your issues, pull requests, and files with some simple syntax. This can be helpful to organize your information and make it easier for others to read. You can also drop in gifs and images to help convey your point! To learn more about using GitHub\u2019s flavor of markdown, read \"Basic Writing and Formatting Syntax\". </p>"},{"location":"resources/github-basics/#engaging-with-the-github-community","title":"Engaging with the GitHub community","text":"<p>The GitHub community is vast. There are many types of people who use GitHub in their day to day\u2014students like you, professional developers, hobbyists working on open source projects, and explorers who are just jumping into the world of software development on their own. There are many ways you can interact with the larger GitHub community, but here are three places where you can start. </p>"},{"location":"resources/github-basics/#starring-repositories","title":"Starring repositories","text":"<p>If you find a repository interesting or you want to keep track of it, star it! When you star a repository it\u2019s also used as a signal to surface better recommendations on github.com/explore. If you\u2019d like to get back to your starred repositories you can do so via your user profile.  To learn  more about starring repositories, read \"Saving Repositories with Stars\". </p>"},{"location":"resources/github-basics/#following-users","title":"Following users","text":"<p>You can follow people on GitHub to receive notifications about their activity and discover projects in their communities. When you follow a user, their public GitHub activity will show up on your dashboard so you can see all the cool things they are working on.  To learn more about following users, read \"Following People\".</p>"},{"location":"resources/github-basics/#browsing-github-explore","title":"Browsing GitHub Explore","text":"<p>GitHub Explore is a great place to do just that \u2026 explore :smile: You can find new projects, events, and developers to interact with.</p> <p>You can check out the GitHub Explore website at github.com/explore. The more you interact with GitHub the more tailored your Explore view will be. </p>"},{"location":"resources/github-basics/#optional-next-steps","title":"\ud83d\udcdd Optional next steps","text":"<ul> <li>Open a pull request and let your teacher know that you\u2019ve finished this course.  </li> <li>Create a new markdown file in this repository. Let them know what you learned and what you are still confused about! Experiment with different styles!</li> <li>Create your profile README. Let the world know a little bit more about you! What are you interested in learning? What are you working on? What's your favorite hobby? Learn more about creating your profile README in the document, \"Managing Your Profile README\".</li> <li>Go to your user dashboard and create a new repository. Experiment with the features within that repository to familiarize yourself with them. </li> <li>Let us know what you liked or didn\u2019t like about the content of this course. What would you like to see more of? What would be interesting or helpful to your learning journey? </li> </ul>"},{"location":"resources/github-basics/#resources","title":"\ud83d\udcda  Resources","text":"<ul> <li>A short video explaining what GitHub is </li> <li>Git and GitHub learning resources </li> <li>Understanding the GitHub flow</li> <li>How to use GitHub branches</li> <li>Interactive Git training materials</li> <li>GitHub's Learning Lab</li> <li>Education community forum</li> <li>GitHub community forum</li> </ul>"}]}